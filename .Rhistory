# Bootstrap library
library(bootstrap)
# Load the iris dataset
data(iris)
# Bootstrap library
library(bootstrap)
library(bootstrap) # Bootstrap library
library(e1071) # e1071 library contains the "skewness" function
# Load the iris dataset
data(iris)
library(bootstrap) # Bootstrap library
library(e1071) # e1071 library contains the "skewness" function
# Load the iris dataset
data(iris)
# Set seed for replication of results
set.seed(1)
library(bootstrap) # Bootstrap library
library(e1071) # e1071 library contains the "skewness" function
# Load the iris dataset
data(iris)
# Set seed for replication of results
set.seed(1)
# Store data in a vector
data = iris$Sepal.Length
data
library(bootstrap) # Bootstrap library
library(e1071) # e1071 library contains the "skewness" function
# Load the iris dataset
data(iris)
# Set seed for replication of results
set.seed(1)
# Store data in a vector
data = iris$Sepal.Length
# Run 200 bootstrap iterations to calculate the skewness
bs = bootstrap(data, nboot = 200, skewness)
bs
data
class(data[1])
bs
clear
clear
bs
library(bootstrap) # Bootstrap library
library(e1071) # e1071 library contains the "skewness" function
# Load the iris dataset
data(iris)
# Set seed for replication of results
set.seed(1)
# Store data in a numeric vector
data = iris$Sepal.Length
# Run 200 bootstrap iterations to calculate the skewness
bs = bootstrap(data, nboot = 200, skewness)
# Store all 200 skewness values in a vector
values = bs$thetastar
values
class(values[1])
library(bootstrap) # Bootstrap library
library(e1071) # e1071 library contains the "skewness" function
# Load the iris dataset
data(iris)
# Set seed for replication of results
set.seed(1)
# Store data in a numeric vector
data = iris$Sepal.Length
# Run 200 bootstrap iterations to calculate the skewness
bs = bootstrap(data, nboot = 200, skewness)
# Store all 200 skewness values in a vector of numeric
values = bs$thetastar
# Calculate mean value, standard deviation and quantiles
mean(values)
sd(values)
quantile(values, c(0.05, 0.95))
library(bootstrap) # Bootstrap library
library(e1071) # e1071 library contains the "skewness" function
# Load the iris dataset
data(iris)
# Set seed for replication of results
set.seed(1)
# Store data in a numeric vector
data = iris$Sepal.Length
# Run 200 bootstrap iterations to calculate the skewness
bs = bootstrap(data, nboot = 200, skewness)
# Store all 200 skewness values in a vector of numeric
values = bs$thetastar
# Calculate mean value, standard deviation and quantiles
mean(values)
sd(values)
quantile(values, c(0.05, 0.95))
library(bootstrap) # Bootstrap library
library(e1071) # e1071 library contains the "skewness" function
# Load the iris dataset
data(iris)
# Set seed for replication of results
set.seed(1)
# Store data in a numeric vector
data = iris$Sepal.Length
# Run 200 bootstrap iterations to calculate the skewness
bs = bootstrap(data, nboot = 200, skewness)
# Store all 200 skewness values in a vector of numeric
values = bs$thetastar
# Calculate mean value, standard deviation and quantiles
mean(values)
sd(values)
quantile(values, c(0.05, 0.95))
library(bootstrap) # Bootstrap library
library(e1071) # e1071 library contains the "skewness" function
# Load the iris dataset
data(iris)
# Set seed for replication of results
set.seed(1)
# Store data in a numeric vector
data = iris$Sepal.Length
# Run 200 bootstrap iterations to calculate the skewness
bs = bootstrap(data, nboot = 200, skewness)
# Store all 200 skewness values in a vector of numeric
values = bs$thetastar
# Calculate mean value, standard deviation and quantiles
mean(values)
sd(values)
quantile(values, c(0.05, 0.95))
library(bootstrap) # Bootstrap library
library(e1071) # e1071 library contains the "skewness" function
# Load the iris dataset
data(iris)
# Set seed for replication of results
set.seed(1)
# Store data in a numeric vector
data = iris$Sepal.Length
# Run 200 bootstrap iterations to calculate the skewness
bs = bootstrap(data, nboot = 200, skewness)
# Store all 200 skewness values in a vector of numeric
values = bs$thetastar
# Calculate mean value, standard deviation and quantiles
mean(values)
sd(values)
quantile(values, c(0.05, 0.95))
library(bootstrap) # Bootstrap library
library(e1071) # e1071 library contains the "skewness" function
# Load the iris dataset
data(iris)
# Set seed for replication of results
set.seed(1)
# Store data in a numeric vector
data = iris$Sepal.Length
# Run 200 bootstrap iterations to calculate the skewness
bs = bootstrap(data, nboot = 200, skewness)
# Store all 200 skewness values in a vector of numeric
values = bs$thetastar
# Calculate mean value, standard deviation and quantiles
mean(values)
sd(values)
quantile(values, c(0.05, 0.95))
#!/usr/local/bin/Rscript
library(cowplot)
library(png)
library(tidyverse)
# Figure for my website
before <- ggdraw() + draw_image(readPNG("/Users/jslit/Downloads/gallery1.png"))
before
ggsave(filename = '/Users/jslit/Downloads/gallery01.png', width = 18, height = 18, unit = "cm", device = cairo_pdf, dpi = 1200, bg = "white")
#!/usr/local/bin/Rscript
library(cowplot)
library(png)
library(tidyverse)
# Figure for my website
before <- ggdraw() + draw_image(readPNG("/Users/jslit/Downloads/gallery1.png"))
before
ggsave(filename = '/Users/jslit/Downloads/gallery01.pdf', width = 18, height = 18, unit = "cm", device = cairo_pdf, dpi = 1200, bg = "white")
before <- ggdraw() + draw_image(readPNG("/Users/jslit/Downloads/gallery2.png"))
before
ggsave(filename = '/Users/jslit/Downloads/gallery02.pdf', width = 18, height = 18, unit = "cm", device = cairo_pdf, dpi = 1200, bg = "white")
before <- ggdraw() + draw_image(readPNG("/Users/jslit/Downloads/gallery3.png"))
before
ggsave(filename = '/Users/jslit/Downloads/gallery03.pdf', width = 18, height = 18, unit = "cm", device = cairo_pdf, dpi = 1200, bg = "white")
before <- ggdraw() + draw_image(readPNG("/Users/jslit/Downloads/gallery4.png"))
before
ggsave(filename = '/Users/jslit/Downloads/gallery04.pdf', width = 18, height = 18, unit = "cm", device = cairo_pdf, dpi = 1200, bg = "white")
before <- ggdraw() + draw_image(readPNG("/Users/jslit/Downloads/gallery5.png"))
before
ggsave(filename = '/Users/jslit/Downloads/gallery05.pdf', width = 18, height = 18, unit = "cm", device = cairo_pdf, dpi = 1200, bg = "white")
sudo rstudio
library(tidyverse)
library(jslutil)
saveRDSforplotread("/Users/jslit/Downloads/Plotread/plotread_output_txt", "/Users/jslit/Desktop")
library(jslutil)
saveRDSforplotread("/Users/jslit/Downloads/Plotread/plotread_output_txt", "/Users/jslit/Desktop")
devtools::install_github("jslfree080/jslutil")
library(jslutil)
saveRDSforplotread("/Users/jslit/Downloads/Plotread/plotread_output_txt", "/Users/jslit/Desktop")
ess_plotread_validation_input <- readRDS("/Users/jungsoo080/Desktop/ess_plotread_validation_input.rds")
ess_plotread_validation_input <- readRDS("/Users/jslit/Desktop/ess_plotread_validation_input.rds")
names(ess_plotread_validation_input)
library(tidyverse)
library(tidyverse)
devtools::install_github("jslfree080/jslutil")
library(jslutil)
setwd("/Users/jslit/Downloads/Plotread/plotread_output_txt")
saveRDSforplotread("/Users/jslit/Desktop")
ess_plotread_validation_input <- readRDS("/Users/jslit/Desktop/ess_plotread_validation_input.rds")
names(ess_plotread_validation_input)
ess_plotread_validation_input
ess_plotread_validation_input[1]
ess_plotread_validation_input[10]
ess_plotread_validation_input[11]
ess_plotread_validation_input[11]
names(ess_plotread_validation_input)
map(names(ess_plotread_validation_input), ~ strsplit(., "[_]")[[1]][4]) %>% unlist()
purrr::map(names(ess_plotread_validation_input), ~ strsplit(., "[_]")[[1]][4]) %>% unlist()
purrr::map(names(ess_plotread_validation_input), ~ strsplit(., "[_]")[[1]][4]) %>% unlist()
setwd("~/jslutil/")
devtools::document()
devtools::document()
